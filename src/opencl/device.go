package opencl

/*
#cgo LDFLAGS: -framework OpenCL
#include <OpenCL/opencl.h>
*/
import "C"

import (
	"errors"
	"unsafe"
)

type DeviceId C.cl_device_id
type DeviceType C.cl_device_type
type DeviceInfo C.cl_device_info

const (
	DEVICE_TYPE_CPU DeviceType = C.CL_DEVICE_TYPE_CPU
	DEVICE_TYPE_GPU DeviceType = C.CL_DEVICE_TYPE_GPU

	DEVICE_ADDRESS_BITS                  DeviceInfo = C.CL_DEVICE_ADDRESS_BITS
	DEVICE_AVAILABLE                     DeviceInfo = C.CL_DEVICE_AVAILABLE
	DEVICE_BUILT_IN_KERNELS              DeviceInfo = C.CL_DEVICE_BUILT_IN_KERNELS
	DEVICE_COMPILER_AVAILABLE            DeviceInfo = C.CL_DEVICE_COMPILER_AVAILABLE
	DEVICE_DOUBLE_FP_CONFIG              DeviceInfo = C.CL_DEVICE_DOUBLE_FP_CONFIG
	DEVICE_ENDIAN_LITTLE                 DeviceInfo = C.CL_DEVICE_ENDIAN_LITTLE
	DEVICE_ERROR_CORRECTION_SUPPORT      DeviceInfo = C.CL_DEVICE_ERROR_CORRECTION_SUPPORT
	DEVICE_EXECUTION_CAPABILITIES        DeviceInfo = C.CL_DEVICE_EXECUTION_CAPABILITIES
	DEVICE_EXTENSIONS                    DeviceInfo = C.CL_DEVICE_EXTENSIONS
	DEVICE_GLOBAL_MEM_CACHE_SIZE         DeviceInfo = C.CL_DEVICE_GLOBAL_MEM_CACHE_SIZE
	DEVICE_GLOBAL_MEM_CACHE_TYPE         DeviceInfo = C.CL_DEVICE_GLOBAL_MEM_CACHE_TYPE
	DEVICE_GLOBAL_MEM_CACHELINE_SIZE     DeviceInfo = C.CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE
	DEVICE_GLOBAL_MEM_SIZE               DeviceInfo = C.CL_DEVICE_GLOBAL_MEM_SIZE
	DEVICE_HALF_FP_CONFIG                DeviceInfo = C.CL_DEVICE_HALF_FP_CONFIG
	DEVICE_HOST_UNIFIED_MEMORY           DeviceInfo = C.CL_DEVICE_HOST_UNIFIED_MEMORY
	DEVICE_IMAGE_SUPPORT                 DeviceInfo = C.CL_DEVICE_IMAGE_SUPPORT
	DEVICE_IMAGE2D_MAX_HEIGHT            DeviceInfo = C.CL_DEVICE_IMAGE2D_MAX_HEIGHT
	DEVICE_IMAGE2D_MAX_WIDTH             DeviceInfo = C.CL_DEVICE_IMAGE2D_MAX_WIDTH
	DEVICE_IMAGE3D_MAX_DEPTH             DeviceInfo = C.CL_DEVICE_IMAGE3D_MAX_DEPTH
	DEVICE_IMAGE3D_MAX_HEIGHT            DeviceInfo = C.CL_DEVICE_IMAGE3D_MAX_HEIGHT
	DEVICE_IMAGE3D_MAX_WIDTH             DeviceInfo = C.CL_DEVICE_IMAGE3D_MAX_WIDTH
	DEVICE_IMAGE_MAX_BUFFER_SIZE         DeviceInfo = C.CL_DEVICE_IMAGE_MAX_BUFFER_SIZE
	DEVICE_IMAGE_MAX_ARRAY_SIZE          DeviceInfo = C.CL_DEVICE_IMAGE_MAX_ARRAY_SIZE
	DEVICE_LINKER_AVAILABLE              DeviceInfo = C.CL_DEVICE_LINKER_AVAILABLE
	DEVICE_LOCAL_MEM_SIZE                DeviceInfo = C.CL_DEVICE_LOCAL_MEM_SIZE
	DEVICE_LOCAL_MEM_TYPE                DeviceInfo = C.CL_DEVICE_LOCAL_MEM_TYPE
	DEVICE_MAX_CLOCK_FREQUENCY           DeviceInfo = C.CL_DEVICE_MAX_CLOCK_FREQUENCY
	DEVICE_MAX_COMPUTE_UNITS             DeviceInfo = C.CL_DEVICE_MAX_COMPUTE_UNITS
	DEVICE_MAX_CONSTANT_ARGS             DeviceInfo = C.CL_DEVICE_MAX_CONSTANT_ARGS
	DEVICE_MAX_CONSTANT_BUFFER_SIZE      DeviceInfo = C.CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE
	DEVICE_MAX_MEM_ALLOC_SIZE            DeviceInfo = C.CL_DEVICE_MAX_MEM_ALLOC_SIZE
	DEVICE_MAX_PARAMETER_SIZE            DeviceInfo = C.CL_DEVICE_MAX_PARAMETER_SIZE
	DEVICE_MAX_READ_IMAGE_ARGS           DeviceInfo = C.CL_DEVICE_MAX_READ_IMAGE_ARGS
	DEVICE_MAX_SAMPLERS                  DeviceInfo = C.CL_DEVICE_MAX_SAMPLERS
	DEVICE_MAX_WORK_GROUP_SIZE           DeviceInfo = C.CL_DEVICE_MAX_WORK_GROUP_SIZE
	DEVICE_MAX_WORK_ITEM_DIMENSIONS      DeviceInfo = C.CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS
	DEVICE_MAX_WORK_ITEM_SIZES           DeviceInfo = C.CL_DEVICE_MAX_WORK_ITEM_SIZES
	DEVICE_MAX_WRITE_IMAGE_ARGS          DeviceInfo = C.CL_DEVICE_MAX_WRITE_IMAGE_ARGS
	DEVICE_MEM_BASE_ADDR_ALIGN           DeviceInfo = C.CL_DEVICE_MEM_BASE_ADDR_ALIGN
	DEVICE_MIN_DATA_TYPE_ALIGN_SIZE      DeviceInfo = C.CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE
	DEVICE_NAME                          DeviceInfo = C.CL_DEVICE_NAME
	DEVICE_NATIVE_VECTOR_WIDTH_CHAR      DeviceInfo = C.CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR
	DEVICE_NATIVE_VECTOR_WIDTH_SHORT     DeviceInfo = C.CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT
	DEVICE_NATIVE_VECTOR_WIDTH_INT       DeviceInfo = C.CL_DEVICE_NATIVE_VECTOR_WIDTH_INT
	DEVICE_NATIVE_VECTOR_WIDTH_LONG      DeviceInfo = C.CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG
	DEVICE_NATIVE_VECTOR_WIDTH_FLOAT     DeviceInfo = C.CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT
	DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE    DeviceInfo = C.CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE
	DEVICE_NATIVE_VECTOR_WIDTH_HALF      DeviceInfo = C.CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF
	DEVICE_OPENCL_C_VERSION              DeviceInfo = C.CL_DEVICE_OPENCL_C_VERSION
	DEVICE_PARENT_DEVICE                 DeviceInfo = C.CL_DEVICE_PARENT_DEVICE
	DEVICE_PARTITION_MAX_SUB_DEVICES     DeviceInfo = C.CL_DEVICE_PARTITION_MAX_SUB_DEVICES
	DEVICE_PARTITION_PROPERTIES          DeviceInfo = C.CL_DEVICE_PARTITION_PROPERTIES
	DEVICE_PARTITION_AFFINITY_DOMAIN     DeviceInfo = C.CL_DEVICE_PARTITION_AFFINITY_DOMAIN
	DEVICE_PARTITION_TYPE                DeviceInfo = C.CL_DEVICE_PARTITION_TYPE
	DEVICE_PLATFORM                      DeviceInfo = C.CL_DEVICE_PLATFORM
	DEVICE_PREFERRED_VECTOR_WIDTH_CHAR   DeviceInfo = C.CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR
	DEVICE_PREFERRED_VECTOR_WIDTH_SHORT  DeviceInfo = C.CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT
	DEVICE_PREFERRED_VECTOR_WIDTH_INT    DeviceInfo = C.CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT
	DEVICE_PREFERRED_VECTOR_WIDTH_LONG   DeviceInfo = C.CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG
	DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT  DeviceInfo = C.CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT
	DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE DeviceInfo = C.CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE
	DEVICE_PREFERRED_VECTOR_WIDTH_HALF   DeviceInfo = C.CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF
	DEVICE_PRINTF_BUFFER_SIZE            DeviceInfo = C.CL_DEVICE_PRINTF_BUFFER_SIZE
	DEVICE_PREFERRED_INTEROP_USER_SYNC   DeviceInfo = C.CL_DEVICE_PREFERRED_INTEROP_USER_SYNC
	DEVICE_PROFILE                       DeviceInfo = C.CL_DEVICE_PROFILE
	DEVICE_PROFILING_TIMER_RESOLUTION    DeviceInfo = C.CL_DEVICE_PROFILING_TIMER_RESOLUTION
	DEVICE_QUEUE_PROPERTIES              DeviceInfo = C.CL_DEVICE_QUEUE_PROPERTIES
	DEVICE_REFERENCE_COUNT               DeviceInfo = C.CL_DEVICE_REFERENCE_COUNT
	DEVICE_SINGLE_FP_CONFIG              DeviceInfo = C.CL_DEVICE_SINGLE_FP_CONFIG
	DEVICE_TYPE                          DeviceInfo = C.CL_DEVICE_TYPE
	DEVICE_VENDOR                        DeviceInfo = C.CL_DEVICE_VENDOR
	DEVICE_VENDOR_ID                     DeviceInfo = C.CL_DEVICE_VENDOR_ID
	DEVICE_VERSION                       DeviceInfo = C.CL_DEVICE_VERSION
	DRIVER_VERSION                       DeviceInfo = C.CL_DRIVER_VERSION
)

func GetDeviceIDs(device_type DeviceType) ([]DeviceId, error) {
	var count C.cl_uint
	C.clGetDeviceIDs(nil, C.cl_device_type(device_type), 0, nil, &count)
	cl_device_ids := make([]C.cl_device_id, count)
	C.clGetDeviceIDs(nil, C.cl_device_type(device_type), count, &cl_device_ids[0], nil)
	device_ids := make([]DeviceId, count)
	for index, cl_device_id := range cl_device_ids {
		device_ids[index] = DeviceId(cl_device_id)
	}
	return device_ids, nil
}

func GetDeviceInfo(device_id DeviceId, device_info DeviceInfo) (interface{}, error) {
	switch device_info {
	// char[]
	case
		DEVICE_BUILT_IN_KERNELS,
		DEVICE_EXTENSIONS,
		DEVICE_NAME,
		DEVICE_OPENCL_C_VERSION,
		DEVICE_PROFILE,
		DEVICE_VENDOR,
		DEVICE_VERSION,
		DRIVER_VERSION:
		var count C.size_t
		if cl_err := C.clGetDeviceInfo(device_id, C.cl_device_info(device_info), 0, nil, &count); cl_err != C.CL_SUCCESS {
			return nil, convertError(cl_err)
		}
		buf := make([]C.char, count)
		if cl_err := C.clGetDeviceInfo(device_id, C.cl_device_info(device_info), count, unsafe.Pointer(&buf[0]), nil); cl_err != C.CL_SUCCESS {
			return nil, convertError(cl_err)
		}
		return C.GoStringN(&buf[0], C.int(count)-1), nil // don't need to copy null byte
	// size_t
	case
		DEVICE_IMAGE2D_MAX_HEIGHT,
		DEVICE_IMAGE2D_MAX_WIDTH,
		DEVICE_IMAGE3D_MAX_DEPTH,
		DEVICE_IMAGE3D_MAX_HEIGHT,
		DEVICE_IMAGE3D_MAX_WIDTH,
		DEVICE_IMAGE_MAX_BUFFER_SIZE,
		DEVICE_IMAGE_MAX_ARRAY_SIZE,
		DEVICE_MAX_PARAMETER_SIZE,
		DEVICE_MAX_WORK_GROUP_SIZE,
		DEVICE_PRINTF_BUFFER_SIZE,
		DEVICE_PROFILING_TIMER_RESOLUTION:
		var value C.size_t
		if cl_err := C.clGetDeviceInfo(device_id, C.cl_device_info(device_info), C.size_t(unsafe.Sizeof(value)), unsafe.Pointer(&value), nil); cl_err != C.CL_SUCCESS {
			return nil, convertError(cl_err)
		}
		return uint64(value), nil
	// cl_uint
	case
		DEVICE_ADDRESS_BITS,
		DEVICE_GLOBAL_MEM_CACHELINE_SIZE,
		DEVICE_MAX_CLOCK_FREQUENCY,
		DEVICE_MAX_COMPUTE_UNITS,
		DEVICE_MAX_CONSTANT_ARGS,
		DEVICE_MAX_READ_IMAGE_ARGS,
		DEVICE_MAX_SAMPLERS,
		DEVICE_MAX_WORK_ITEM_DIMENSIONS,
		DEVICE_MAX_WRITE_IMAGE_ARGS,
		DEVICE_MEM_BASE_ADDR_ALIGN,
		DEVICE_MIN_DATA_TYPE_ALIGN_SIZE,
		DEVICE_NATIVE_VECTOR_WIDTH_CHAR,
		DEVICE_NATIVE_VECTOR_WIDTH_SHORT,
		DEVICE_NATIVE_VECTOR_WIDTH_INT,
		DEVICE_NATIVE_VECTOR_WIDTH_LONG,
		DEVICE_NATIVE_VECTOR_WIDTH_FLOAT,
		DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE,
		DEVICE_NATIVE_VECTOR_WIDTH_HALF,
		DEVICE_PARTITION_MAX_SUB_DEVICES,
		DEVICE_PREFERRED_VECTOR_WIDTH_CHAR,
		DEVICE_PREFERRED_VECTOR_WIDTH_SHORT,
		DEVICE_PREFERRED_VECTOR_WIDTH_INT,
		DEVICE_PREFERRED_VECTOR_WIDTH_LONG,
		DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT,
		DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE,
		DEVICE_PREFERRED_VECTOR_WIDTH_HALF,
		DEVICE_REFERENCE_COUNT,
		DEVICE_VENDOR_ID:
		var value C.cl_uint
		if cl_err := C.clGetDeviceInfo(device_id, C.cl_device_info(device_info), C.size_t(unsafe.Sizeof(value)), unsafe.Pointer(&value), nil); cl_err != C.CL_SUCCESS {
			return nil, convertError(cl_err)
		}
		return uint32(value), nil
	// cl_bool
	case
		DEVICE_AVAILABLE,
		DEVICE_COMPILER_AVAILABLE,
		DEVICE_ENDIAN_LITTLE,
		DEVICE_ERROR_CORRECTION_SUPPORT,
		DEVICE_HOST_UNIFIED_MEMORY,
		DEVICE_IMAGE_SUPPORT,
		DEVICE_LINKER_AVAILABLE,
		DEVICE_PREFERRED_INTEROP_USER_SYNC:
		var value C.cl_bool
		if cl_err := C.clGetDeviceInfo(device_id, C.cl_device_info(device_info), C.size_t(unsafe.Sizeof(value)), unsafe.Pointer(&value), nil); cl_err != C.CL_SUCCESS {
			return nil, convertError(cl_err)
		}
		return value == C.CL_TRUE, nil
	// cl_ulong
	case
		DEVICE_GLOBAL_MEM_CACHE_SIZE,
		DEVICE_GLOBAL_MEM_SIZE,
		DEVICE_LOCAL_MEM_SIZE,
		DEVICE_MAX_CONSTANT_BUFFER_SIZE,
		DEVICE_MAX_MEM_ALLOC_SIZE:
		var value C.cl_ulong
		if cl_err := C.clGetDeviceInfo(device_id, C.cl_device_info(device_info), C.size_t(unsafe.Sizeof(value)), unsafe.Pointer(&value), nil); cl_err != C.CL_SUCCESS {
			return nil, convertError(cl_err)
		}
		return uint64(value), nil
		// weird types
		// DEVICE_PARENT_DEVICE
		// DEVICE_PLATFORM
		// DEVICE_TYPE
		// DEVICE_DOUBLE_FP_CONFIG
		// DEVICE_EXECUTION_CAPABILITIES
		// DEVICE_GLOBAL_MEM_CACHE_TYPE
		// DEVICE_HALF_FP_CONFIG
		// DEVICE_LOCAL_MEM_TYPE
		// DEVICE_MAX_WORK_ITEM_SIZES
		// DEVICE_PARTITION_PROPERTIES
		// DEVICE_PARTITION_AFFINITY_DOMAIN
		// DEVICE_PARTITION_TYPE
		// DEVICE_QUEUE_PROPERTIES
		// DEVICE_SINGLE_FP_CONFIG
	default:
		return nil, errors.New("Unrecognized property")
	}
}
