package opencl

/*
#cgo LDFLAGS: -framework OpenCL
#include <OpenCL/opencl.h>
*/
import "C"

type ErrorCode C.cl_int

type Error struct {
	Code ErrorCode
	msg  string
}

const (
	SUCCESS                         ErrorCode = C.CL_SUCCESS
	DEVICE_NOT_FOUND                ErrorCode = C.CL_DEVICE_NOT_FOUND
	DEVICE_NOT_AVAILABLE            ErrorCode = C.CL_DEVICE_NOT_AVAILABLE
	COMPILER_NOT_AVAILABLE          ErrorCode = C.CL_COMPILER_NOT_AVAILABLE
	MEM_OBJECT_ALLOCATION_FAILURE   ErrorCode = C.CL_MEM_OBJECT_ALLOCATION_FAILURE
	OUT_OF_RESOURCES                ErrorCode = C.CL_OUT_OF_RESOURCES
	OUT_OF_HOST_MEMORY              ErrorCode = C.CL_OUT_OF_HOST_MEMORY
	PROFILING_INFO_NOT_AVAILABLE    ErrorCode = C.CL_PROFILING_INFO_NOT_AVAILABLE
	MEM_COPY_OVERLAP                ErrorCode = C.CL_MEM_COPY_OVERLAP
	IMAGE_FORMAT_MISMATCH           ErrorCode = C.CL_IMAGE_FORMAT_MISMATCH
	IMAGE_FORMAT_NOT_SUPPORTED      ErrorCode = C.CL_IMAGE_FORMAT_NOT_SUPPORTED
	BUILD_PROGRAM_FAILURE           ErrorCode = C.CL_BUILD_PROGRAM_FAILURE
	MAP_FAILURE                     ErrorCode = C.CL_MAP_FAILURE
	INVALID_VALUE                   ErrorCode = C.CL_INVALID_VALUE
	INVALID_DEVICE_TYPE             ErrorCode = C.CL_INVALID_DEVICE_TYPE
	INVALID_PLATFORM                ErrorCode = C.CL_INVALID_PLATFORM
	INVALID_DEVICE                  ErrorCode = C.CL_INVALID_DEVICE
	INVALID_CONTEXT                 ErrorCode = C.CL_INVALID_CONTEXT
	INVALID_QUEUE_PROPERTIES        ErrorCode = C.CL_INVALID_QUEUE_PROPERTIES
	INVALID_COMMAND_QUEUE           ErrorCode = C.CL_INVALID_COMMAND_QUEUE
	INVALID_HOST_PTR                ErrorCode = C.CL_INVALID_HOST_PTR
	INVALID_MEM_OBJECT              ErrorCode = C.CL_INVALID_MEM_OBJECT
	INVALID_IMAGE_FORMAT_DESCRIPTOR ErrorCode = C.CL_INVALID_IMAGE_FORMAT_DESCRIPTOR
	INVALID_IMAGE_SIZE              ErrorCode = C.CL_INVALID_IMAGE_SIZE
	INVALID_SAMPLER                 ErrorCode = C.CL_INVALID_SAMPLER
	INVALID_BINARY                  ErrorCode = C.CL_INVALID_BINARY
	INVALID_BUILD_OPTIONS           ErrorCode = C.CL_INVALID_BUILD_OPTIONS
	INVALID_PROGRAM                 ErrorCode = C.CL_INVALID_PROGRAM
	INVALID_PROGRAM_EXECUTABLE      ErrorCode = C.CL_INVALID_PROGRAM_EXECUTABLE
	INVALID_KERNEL_NAME             ErrorCode = C.CL_INVALID_KERNEL_NAME
	INVALID_KERNEL_DEFINITION       ErrorCode = C.CL_INVALID_KERNEL_DEFINITION
	INVALID_KERNEL                  ErrorCode = C.CL_INVALID_KERNEL
	INVALID_ARG_INDEX               ErrorCode = C.CL_INVALID_ARG_INDEX
	INVALID_ARG_VALUE               ErrorCode = C.CL_INVALID_ARG_VALUE
	INVALID_ARG_SIZE                ErrorCode = C.CL_INVALID_ARG_SIZE
	INVALID_KERNEL_ARGS             ErrorCode = C.CL_INVALID_KERNEL_ARGS
	INVALID_WORK_DIMENSION          ErrorCode = C.CL_INVALID_WORK_DIMENSION
	INVALID_WORK_GROUP_SIZE         ErrorCode = C.CL_INVALID_WORK_GROUP_SIZE
	INVALID_WORK_ITEM_SIZE          ErrorCode = C.CL_INVALID_WORK_ITEM_SIZE
	INVALID_GLOBAL_OFFSET           ErrorCode = C.CL_INVALID_GLOBAL_OFFSET
	INVALID_EVENT_WAIT_LIST         ErrorCode = C.CL_INVALID_EVENT_WAIT_LIST
	INVALID_EVENT                   ErrorCode = C.CL_INVALID_EVENT
	INVALID_OPERATION               ErrorCode = C.CL_INVALID_OPERATION
	INVALID_GL_OBJECT               ErrorCode = C.CL_INVALID_GL_OBJECT
	INVALID_BUFFER_SIZE             ErrorCode = C.CL_INVALID_BUFFER_SIZE
	INVALID_MIP_LEVEL               ErrorCode = C.CL_INVALID_MIP_LEVEL
)

func (err Error) Error() string {
	return err.msg
}

func convertError(cl_err C.cl_int) error {
	if cl_err == C.CL_SUCCESS {
		return nil
	}
	code := ErrorCode(cl_err)
	return Error{Code: code, msg: ErrorCodeToString(code)}
}

func ErrorCodeToString(code ErrorCode) string {
	switch code {
	case SUCCESS:
		return "CL_SUCCESS"
	case DEVICE_NOT_FOUND:
		return "CL_DEVICE_NOT_FOUND"
	case DEVICE_NOT_AVAILABLE:
		return "CL_DEVICE_NOT_AVAILABLE"
	case COMPILER_NOT_AVAILABLE:
		return "CL_COMPILER_NOT_AVAILABLE"
	case MEM_OBJECT_ALLOCATION_FAILURE:
		return "CL_MEM_OBJECT_ALLOCATION_FAILURE"
	case OUT_OF_RESOURCES:
		return "CL_OUT_OF_RESOURCES"
	case OUT_OF_HOST_MEMORY:
		return "CL_OUT_OF_HOST_MEMORY"
	case PROFILING_INFO_NOT_AVAILABLE:
		return "CL_PROFILING_INFO_NOT_AVAILABLE"
	case MEM_COPY_OVERLAP:
		return "CL_MEM_COPY_OVERLAP"
	case IMAGE_FORMAT_MISMATCH:
		return "CL_IMAGE_FORMAT_MISMATCH"
	case IMAGE_FORMAT_NOT_SUPPORTED:
		return "CL_IMAGE_FORMAT_NOT_SUPPORTED"
	case BUILD_PROGRAM_FAILURE:
		return "CL_BUILD_PROGRAM_FAILURE"
	case MAP_FAILURE:
		return "CL_MAP_FAILURE"
	case INVALID_VALUE:
		return "CL_INVALID_VALUE"
	case INVALID_DEVICE_TYPE:
		return "CL_INVALID_DEVICE_TYPE"
	case INVALID_PLATFORM:
		return "CL_INVALID_PLATFORM"
	case INVALID_DEVICE:
		return "CL_INVALID_DEVICE"
	case INVALID_CONTEXT:
		return "CL_INVALID_CONTEXT"
	case INVALID_QUEUE_PROPERTIES:
		return "CL_INVALID_QUEUE_PROPERTIES"
	case INVALID_COMMAND_QUEUE:
		return "CL_INVALID_COMMAND_QUEUE"
	case INVALID_HOST_PTR:
		return "CL_INVALID_HOST_PTR"
	case INVALID_MEM_OBJECT:
		return "CL_INVALID_MEM_OBJECT"
	case INVALID_IMAGE_FORMAT_DESCRIPTOR:
		return "CL_INVALID_IMAGE_FORMAT_DESCRIPTOR"
	case INVALID_IMAGE_SIZE:
		return "CL_INVALID_IMAGE_SIZE"
	case INVALID_SAMPLER:
		return "CL_INVALID_SAMPLER"
	case INVALID_BINARY:
		return "CL_INVALID_BINARY"
	case INVALID_BUILD_OPTIONS:
		return "CL_INVALID_BUILD_OPTIONS"
	case INVALID_PROGRAM:
		return "CL_INVALID_PROGRAM"
	case INVALID_PROGRAM_EXECUTABLE:
		return "CL_INVALID_PROGRAM_EXECUTABLE"
	case INVALID_KERNEL_NAME:
		return "CL_INVALID_KERNEL_NAME"
	case INVALID_KERNEL_DEFINITION:
		return "CL_INVALID_KERNEL_DEFINITION"
	case INVALID_KERNEL:
		return "CL_INVALID_KERNEL"
	case INVALID_ARG_INDEX:
		return "CL_INVALID_ARG_INDEX"
	case INVALID_ARG_VALUE:
		return "CL_INVALID_ARG_VALUE"
	case INVALID_ARG_SIZE:
		return "CL_INVALID_ARG_SIZE"
	case INVALID_KERNEL_ARGS:
		return "CL_INVALID_KERNEL_ARGS"
	case INVALID_WORK_DIMENSION:
		return "CL_INVALID_WORK_DIMENSION"
	case INVALID_WORK_GROUP_SIZE:
		return "CL_INVALID_WORK_GROUP_SIZE"
	case INVALID_WORK_ITEM_SIZE:
		return "CL_INVALID_WORK_ITEM_SIZE"
	case INVALID_GLOBAL_OFFSET:
		return "CL_INVALID_GLOBAL_OFFSET"
	case INVALID_EVENT_WAIT_LIST:
		return "CL_INVALID_EVENT_WAIT_LIST"
	case INVALID_EVENT:
		return "CL_INVALID_EVENT"
	case INVALID_OPERATION:
		return "CL_INVALID_OPERATION"
	case INVALID_GL_OBJECT:
		return "CL_INVALID_GL_OBJECT"
	case INVALID_BUFFER_SIZE:
		return "CL_INVALID_BUFFER_SIZE"
	case INVALID_MIP_LEVEL:
		return "CL_INVALID_MIP_LEVEL"
	default:
		return "<unknown>"
	}
}
